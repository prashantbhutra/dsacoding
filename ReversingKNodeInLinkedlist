
// reversing k nodes in Linkedlist

#include<bits/stdc++.h>
using namespace std;

class  Linkedlist{

    public:

    int data;
    Linkedlist* next;

    Linkedlist(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtTail(Linkedlist* &head, int val){

    Linkedlist* n = new Linkedlist(val);

    if(head==NULL){
        head=n;
        return;
    }

    Linkedlist* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;

}
void display(Linkedlist* head){
    Linkedlist* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}



Linkedlist* reversek(Linkedlist* &head,int k){

    Linkedlist* prevptr=NULL;
    Linkedlist* currptr=head;
    Linkedlist* nextptr;

    int count=0;

    while(currptr!=NULL && count<k){
        nextptr=currptr->next;
        currptr->next=prevptr;

        prevptr=currptr;
        currptr=nextptr;
        count++;

    }
    if(nextptr!=NULL){

    head->next = reversek(nextptr,k);
    }
    return prevptr;
}

int main(){

    Linkedlist* head=NULL;
    insertAtTail(head,1);
    insertAtTail(head,2);
    insertAtTail(head,3);
    insertAtTail(head,4);
    insertAtTail(head,5);
    insertAtTail(head,6);
    display(head);

    int k=2;

    Linkedlist* newhead=reversek(head,k);
    display(head);
    return 0;
}