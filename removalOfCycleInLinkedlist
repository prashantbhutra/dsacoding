
#include<bits/stdc++.h>
using namespace std;

class  Linkedlist{

    public:

    int data;
    Linkedlist* next;

    Linkedlist(int data){
        this->data=data;
        this->next=NULL;
    }
};
void insertAtTail(Linkedlist* &head, int val){

    Linkedlist* n = new Linkedlist(val);

    if(head==NULL){
        head=n;
        return;
    }

    Linkedlist* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;

}
void display(Linkedlist* head){
    Linkedlist* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

void MakeCycle(Linkedlist* &head,int pos){

    Linkedlist* temp=head;
    Linkedlist* StartNode;

    int count=1;

    while(temp->next!=NULL){

        if(count==pos){
            StartNode=temp;
        }
        temp=temp->next;
        count++;
    }
    temp->next=StartNode;
}

bool DetectCycle(Linkedlist* &head){

    Linkedlist* slow=head;
    Linkedlist* fast=head;

    while(fast!=NULL && fast->next!=NULL){

        slow=slow->next;
        fast=fast->next->next;

        if(fast==slow){
            return true;
        }
    }
    return false;

}


void removeCycle(Linkedlist* &head){

    Linkedlist* slow=head;
    Linkedlist* fast=head;

    do{
        slow=slow->next;
        fast=fast->next->next;
    }while (slow!=fast);

    fast=head;

    while (slow->next!=fast->next)
    {
        slow=slow->next;
        fast=fast->next;
    }
    
    slow->next=NULL;
    

}

int main(){

    Linkedlist* head=NULL;
    insertAtTail(head,1);
    insertAtTail(head,2);
    insertAtTail(head,3);
    insertAtTail(head,4);
    insertAtTail(head,5);
    insertAtTail(head,6);
    MakeCycle(head,3);
    //display(head);
    cout<<DetectCycle(head)<<endl;
    removeCycle(head);
    cout<<DetectCycle(head)<<endl;
    display(head);
    
    return 0;
}
