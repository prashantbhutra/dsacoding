
#include<bits/stdc++.h>
using namespace std;

class Linkedlist{

    public:

    int data;
    Linkedlist *next;

    Linkedlist(int data){

        this->data=data;
        this->next=NULL;
    }

};

void insertAtTail(Linkedlist* &head,int val){
    
    Linkedlist *n = new Linkedlist(val);
    if(head==NULL){
        head=n;
        return;
    }

    Linkedlist *temp=head;

    while(temp->next!=NULL){
        temp=temp->next;
    }

    temp->next=n;
}


void display(Linkedlist *head){

    Linkedlist *temp=head;

    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

void intersect(Linkedlist* &head1 , Linkedlist* &head2 , int pos){
    
    Linkedlist* temp1 = head1; 
    pos--;
    
    while(pos--){
        temp1=temp1->next;
    }
    
    Linkedlist* temp2 =head2;
    
    while(temp2->next!=NULL){
        temp2=temp2->next;
    }
    temp2->next=temp1;
    
}


int length(Linkedlist* head){

    int l=0;
    Linkedlist* temp=head;

    while(temp!=NULL){
        l++;
        temp=temp->next;
    }
    return l;
}

int intersection(Linkedlist* &head1 , Linkedlist* &head2){
    
    int l1=length(head1);
    int l2=length(head2);
    
    int d=0;
    Linkedlist* ptr1;
    Linkedlist* ptr2;
    
    if(l1>l2){
        d=l1-l2;
        ptr1=head1;
        ptr2=head2;
    }
    else{
        d=l2-l1;
        ptr1=head2;
        ptr2=head1;
    }
    
    while(d){
        ptr1=ptr1->next;
        if(ptr1==NULL){
            return -1;
        }
        d--;
    }
    
    while(ptr1!=NULL && ptr2!=NULL){
        
        if(ptr1==ptr2){
            return ptr1->data;
        }
        
        ptr1=ptr1->next;
        ptr2=ptr2->next;
    }
    
    return -1;
}


int main(){

    Linkedlist* head1=NULL;
    Linkedlist* head2=NULL;
    
    insertAtTail(head1,1);
    insertAtTail(head1,2);
    insertAtTail(head1,3);
    insertAtTail(head1,4);
    insertAtTail(head1,5);
    insertAtTail(head1,6);
    insertAtTail(head1,7);
    insertAtTail(head1,8);
    insertAtTail(head2,9);
    insertAtTail(head2,10);
    insertAtTail(head2,11);
    intersect(head1,head2,4);
    display(head1);
    display(head2);
    
    cout<<intersection(head1,head2)<<endl;
    
    
    return 0;
}


