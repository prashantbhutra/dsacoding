
// search in a linkedlist


#include<bits/stdc++.h>
using namespace std;

class  Linkedlist{

    public:

    int data;
    Linkedlist* next;

    Linkedlist(int data){
        this->data=data;
        this->next=NULL;
    }
};

void insertAtstart(Linkedlist* &head , int val){

    Linkedlist* n = new Linkedlist(val);

    if(head==NULL){
        head=n;
        return;
    }

    n->next=head;
    head=n;

}

bool search(Linkedlist* head,int key){

    Linkedlist* temp=head;
    while(temp!=NULL){
        if(temp->data==key){
            return true;
        }
        temp=temp->next;
    }
    return false;
}

void display(Linkedlist* head){
    Linkedlist* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}


int main(){

    Linkedlist* head=NULL;
    insertAtstart(head,1);
    insertAtstart(head,2);
    insertAtstart(head,3);
    display(head);
    insertAtstart(head,4);
    display(head);
    cout<<search(head,5)<<endl;
    return 0;
}




// adding at first

#include<bits/stdc++.h>
using namespace std;

class linkedlist{

    public:

    int data;
    linkedlist* next;

    linkedlist(int data){
        this->data=data;
        this->next=next;
    }

};

void insertAtstart(linkedlist* &head , int val){

    linkedlist* n = new linkedlist(val);

    if(head==NULL){
        head=n;
        return;
    }

    n->next=head;
    head=n;

}


void display(linkedlist* head){
    linkedlist* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}


int main(){

    linkedlist* head=NULL;
    insertAtstart(head,1);
    insertAtstart(head,2);
    insertAtstart(head,3);
    display(head);
    insertAtstart(head,4);
    display(head);
    return 0;
}



// Middle of linked list

#include<bits/stdc++.h>
using namespace std;

class Linkedlist {
public:

    int data;
    Linkedlist* next;

    Linkedlist (int data){
        this->data=data;
        this->next=NULL;
    }
};

int lengthofnode (Linkedlist *head){

    int length=0;
    Linkedlist* itr=head;
    while(itr !=NULL){
        length++;
        itr=itr->next;
    }

    return length;
}

int main()
{

    Linkedlist* node1 = new Linkedlist(3);
    Linkedlist* node2 = new Linkedlist(4);
    Linkedlist* node3 = new Linkedlist(5);

    node1->next=node2;
    node2->next=node3;
    Linkedlist* itr=node1;
    Linkedlist* head;

    int middleterm= lengthofnode(head)/2   +1;

    while(itr!=NULL){
        middleterm--;
        if(middleterm==0){
            cout<<itr->data<<endl;
            break;
        }

    }


    return 0;
}


//adding at last

#include<bits/stdc++.h>
using namespace std;

class node{

    public:
    int data;
    node* next;

    node (int data){
        this->data=data;
        this->next=NULL;
    }

};

void insertAtTail(node* &head, int val){

    node* n = new node(val);

    if(head==NULL){
        head=n;
        return;
    }

    node* temp=head;
    while(temp->next!=NULL){
        temp=temp->next;
    }
    temp->next=n;

}

void display(node* head){
    node* temp=head;
    while(temp!=NULL){
        cout<<temp->data<<"->";
        temp=temp->next;
    }
    cout<<"NULL"<<endl;
}

int main(){

    node* head=NULL;
    insertAtTail(head,1);
    insertAtTail(head,2);
    insertAtTail(head,3);
    display(head);
    return 0;
}



